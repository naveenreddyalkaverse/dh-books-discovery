{
  "_args": [
    [
      "humane-indexer@http://artifactory.newshunt.com/nexus/content/repositories/npm-snapshots/humane-indexer/-/humane-indexer-2.0.2.tgz",
      "/Users/naveen/Code/verse/dh-books-discovery"
    ]
  ],
  "_from": "http://artifactory.newshunt.com/nexus/content/repositories/npm-snapshots/humane-indexer/-/humane-indexer-2.0.2.tgz",
  "_id": "humane-indexer@2.0.2",
  "_inCache": true,
  "_installable": true,
  "_location": "/humane-indexer",
  "_phantomChildren": {
    "charenc": "0.0.1",
    "crypt": "0.0.1",
    "is-buffer": "1.1.3"
  },
  "_requested": {
    "name": "humane-indexer",
    "raw": "humane-indexer@http://artifactory.newshunt.com/nexus/content/repositories/npm-snapshots/humane-indexer/-/humane-indexer-2.0.2.tgz",
    "rawSpec": "http://artifactory.newshunt.com/nexus/content/repositories/npm-snapshots/humane-indexer/-/humane-indexer-2.0.2.tgz",
    "scope": null,
    "spec": "http://artifactory.newshunt.com/nexus/content/repositories/npm-snapshots/humane-indexer/-/humane-indexer-2.0.2.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "http://artifactory.newshunt.com/nexus/content/repositories/npm-snapshots/humane-indexer/-/humane-indexer-2.0.2.tgz",
  "_shasum": "2bc3f701ffc4415107584eb54f17bcd8acadc4d1",
  "_shrinkwrap": null,
  "_spec": "humane-indexer@http://artifactory.newshunt.com/nexus/content/repositories/npm-snapshots/humane-indexer/-/humane-indexer-2.0.2.tgz",
  "_where": "/Users/naveen/Code/verse/dh-books-discovery",
  "author": {
    "name": "Shailendra Sharma"
  },
  "babel": {
    "plugins": [
      "transform-runtime"
    ],
    "presets": [
      "node5"
    ]
  },
  "bugs": {
    "url": "https://github.com/naveenreddyalkaverse/humane-indexer/issues"
  },
  "dependencies": {
    "bluebird": "^3.3.4",
    "chalk": "^1.1.3",
    "chokidar": "^1.4.3",
    "command-line-boilerplate": "^1.1.3",
    "csv-parse": "^1.0.2",
    "events": "^1.1.0",
    "graceful-fs": "^4.1.3",
    "hiredis": "^0.4.1",
    "humane-node-commons": "^1.1.4",
    "java": "^0.6.1",
    "joi": "^8.0.5",
    "jsonparse": "^1.2.0",
    "lodash": "^4.6.1",
    "lowdb": "^0.12.5",
    "md5": "^2.1.0",
    "moment": "^2.12.0",
    "performance-now": "^0.2.0",
    "redislock": "^1.2.0",
    "semlocks": "^1.3.0"
  },
  "description": "Indexer module for Humane Discovery",
  "devDependencies": {
    "babel-cli": "^6.10.1",
    "babel-core": "^6.7.4",
    "babel-plugin-transform-runtime": "^6.6.0",
    "babel-preset-node5": "^11.0.1",
    "eslint": "^2.5.3",
    "eslint-config-360fy": "^1.1.2",
    "eslint-plugin-react": "^5.0.1"
  },
  "eslintConfig": {
    "extends": "360fy"
  },
  "homepage": "https://github.com/naveenreddyalkaverse/humane-indexer#readme",
  "license": "MIT",
  "name": "humane-indexer",
  "optionalDependencies": {},
  "publishConfig": {
    "registry": "http://artifactory.newshunt.com/nexus/content/repositories/npm-snapshots/"
  },
  "readme": "# humane-indexer\n\n## APIs\n\n>\n>Note:\n>    * Indexer APIs are available at: `http://<server-url>/:instanceName/indexer/api`.\n>    * All types must be valid index types defined in configuration.\n>    * BODY must be valid `JSON`.\n>    * All requests shall have `Content-Type` header as: `Content-Type: application/json`\n\n### Add\n\nThis method adds document of given type.\n\n###### **Method 1**\n\n- TYPE  : `POST`\n\n- URL   : `/add`\n\n- BODY  : `{type: <type>, doc: <data>}`\n\n- SUCCESS RESPONSE  : \n\n    - Http Status Code: 200 or 201\n    \n    - Sample Response Body :\n\n      ```\n      {\n        \"_id\": \"18473\",\n        \"_type\": \"abcType\",\n        \"_index\": \"xyzIndex\",\n        \"_version\": 5,\n        \"_statusCode\": 201,\n        \"_status\": \"SUCCESS\",\n        \"_operation\": \"ADD\",\n        \"serviceTimeTaken\": \"127.377\"\n      }\n      ```\n\n- ERROR RESPONSES   : See Common Error Scenarios\n\n    - Case: Document already exists\n    \n        - Http Status Code: 404\n        \n        - Sample Response Body :\n    \n          ```json\n          {\n            \"_id\": \"18473\",\n            \"_type\": \"abcType\",\n            \"_index\": \"xyzIndex\",\n            \"_statusCode\": 404,\n            \"_status\": \"FAIL\",\n            \"_failCode\": \"EXISTS_ALREADY\",\n            \"_operation\": \"ADD\",\n            \"serviceTimeTaken\": \"70.075\"\n          }\n          ```\n    \n    - See Common Error Scenarios\n\n###### **Method 2**\n\n- TYPE  : `PUT`\n\n- URL   : `/:type`\n\n- BODY  : `{doc: <data>}`\n\n- SUCCESS RESPONSE  : Same as method 1\n\n- ERROR RESPONSES   : Same as method 1\n\n### Full Update\n\nThis method does full update of document of given type and id.\n\n###### **Method 1**\n\n- TYPE  : `POST`\n\n- URL   : `/update`\n\n- BODY  : `{type: <type>, id: <id>, doc: <data>}`\n\n- SUCCESS RESPONSE  :\n\n    - Http Status Code: 200\n    \n    - Sample Response Body :\n\n      ```\n      {\n        \"_id\": \"18473\",\n        \"_type\": \"abcType\",\n        \"_index\": \"xyzIndex\",\n        \"_version\": 1,\n        \"_statusCode\": 200,\n        \"_status\": \"SUCCESS\",\n        \"_operation\": \"UPDATE\",\n        \"serviceTimeTaken\": \"255.350\"\n      }\n      ```\n\n- ERROR RESPONSES   :\n\n    - Case: Not found ID\n    \n        - Http Status Code: 404\n        \n        - Sample Response Body :\n    \n          ```json\n          {\n            \"_id\": \"18473\",\n            \"_type\": \"abcType\",\n            \"_index\": \"xyzIndex\",\n            \"_statusCode\": 404,\n            \"_status\": \"FAIL\",\n            \"_failCode\": \"NOT_FOUND\",\n            \"_operation\": \"UPDATE\",\n            \"serviceTimeTaken\": \"70.075\"\n          }\n          ```\n    \n    - See Common Error Scenarios\n  \n###### **Method 2**\n\n- TYPE  : `POST`\n\n- URL   : `/:type/:id`\n\n- BODY  : `{doc: <data>}`\n\n- SUCCESS RESPONSE  : Same as method 1\n\n- ERROR RESPONSES   : Same as method 1\n\n### Partial Update\n\nThis method is optimised for partial updates of given type and id.\n\n- TYPE  : `POST`\n\n- URL   : `/partialUpdate`\n\n- BODY  : `{type: <type>, id: <id>, doc: <data>}`\n\n- SUCCESS RESPONSE  :\n\n    - Http Status Code: 200\n    \n    - Sample Response Body :\n\n      ```\n      {\n        \"_id\": \"18473\",\n        \"_type\": \"abcType\",\n        \"_index\": \"xyzIndex\",\n        \"_version\": 1,\n        \"_statusCode\": 200,\n        \"_status\": \"SUCCESS\",\n        \"_operation\": \"PARTIAL_UPDATE\",\n        \"serviceTimeTaken\": \"133.818\"\n      }\n      ```\n\n- ERROR RESPONSES   :\n\n    - Case: Not found ID\n    \n        - Http Status Code: 404\n        \n        - Sample Response Body :\n    \n          ```json\n          {\n            \"_id\": \"18479\",\n            \"_type\": \"abcType\",\n            \"_index\": \"xyzIndex\",\n            \"_statusCode\": 404,\n            \"_status\": \"FAIL\",\n            \"_failCode\": \"NOT_FOUND\",\n            \"_operation\": \"PARTIAL_UPDATE\",\n            \"serviceTimeTaken\": \"16.548\"\n          }\n          ```\n    \n    - See Common Error Scenarios\n\n### Upsert\n\nThis method adds data of given type if it does not exist, else updates.\n\n###### **Method 1**\n\n- TYPE  : `POST`\n\n- URL   : `/upsert`\n\n- BODY  : `{type: <type>, doc: <data>}`\n\n- SUCCESS RESPONSE  : For new document: add response, for existing document: update response\n\n- ERROR RESPONSES   : See Common Error Scenarios\n\n###### **Method 2**\n\n- TYPE  : `POST`\n\n- URL   : `/:type`\n\n- BODY  : `{doc: <data>}`\n\n- SUCCESS RESPONSE  : Same as method 1\n\n- ERROR RESPONSES   : Same as method 1\n\n### Remove\n\nThis method removes document of given type and id.\n\n###### **Method 1**\n\n- TYPE  : `POST`\n\n- URL   : `/remove`\n\n- BODY  : `{type: <type>, id: <id>}`\n\n- SUCCESS RESPONSE  :\n\n    - Http Status Code: 200\n    \n    - Sample Response Body :\n    \n      ```\n      {\n        \"_id\": \"18473\",\n        \"_type\": \"abcType\",\n        \"_index\": \"xyzIndex\",\n        \"_version\": 4,\n        \"found\": true,\n        \"_statusCode\": 200,\n        \"_status\": \"SUCCESS\",\n        \"_operation\": \"REMOVE\",\n        \"serviceTimeTaken\": \"122.236\"\n      }\n      ```\n\n- ERROR RESPONSES   :\n  \n    - Case: Not found ID\n    \n        - Http Status Code: 404\n        \n        - Sample Response Body :\n    \n          ```json\n          {\n            \"_id\": \"18473\",\n            \"_type\": \"abcType\",\n            \"_index\": \"xyzIndex\",\n            \"_statusCode\": 404,\n            \"_status\": \"FAIL\",\n            \"_operation\": \"REMOVE\",\n            \"_failCode\": \"NOT_FOUND\",\n            \"serviceTimeTaken\": \"84.184\"\n          }\n          ```\n    \n    - See Common Error Scenarios\n    \n###### **Method 2**\n\n- Type  : `DELETE`\n\n- URL   : `/:type/:id`\n\n- SUCCESS RESPONSE  : Same as method 1\n\n- ERROR RESPONSES   : Same as method 1\n\n### Common Error Scenarios\n\n- Case: Undefined Type - when type is not specified\n    - Http Status Code: 400\n    \n    - Sample Response Body :\n    \n      ```json\n      {\n        \"_statusCode\": 400,\n        \"_errorCode\": \"VALIDATION_ERROR\",\n        \"_status\": \"ERROR\",\n        \"details\": {\n          \"code\": \"UNDEFINED_TYPE\"\n        },\n        \"_errorId\": 1458790949474\n      }\n      ```\n\n- Case: Unrecognized Type - when type is not among the configured\n\n    - Http Status Code: 400\n    \n    - Sample Response Body :\n    \n      ```json\n      {\n        \"_statusCode\": 400,\n        \"_errorCode\": \"VALIDATION_ERROR\",\n        \"_status\": \"ERROR\",\n        \"details\": {\n          \"code\": \"UNRECOGNIZED_TYPE\",\n          \"type\": \"XYZ\"\n        },\n        \"_errorId\": 1458790974877\n      }\n      ```\n         \n- Case: Undefined ID - when ID is not specified or can not be calculated\n\n    - Http Status Code: 400\n    \n    - Sample Response Body :\n    \n      ```json\n      {\n        \"_statusCode\": 400,\n        \"_errorCode\": \"VALIDATION_ERROR\",\n        \"_status\": \"ERROR\",\n        \"details\": {\n          \"code\": \"UNDEFINED_ID\"\n        },\n        \"_errorId\": 1458748607506\n      }\n      ```\n  \n- Case: Internal Service Error - when there is some internal service error\n\n    - Http Status Code: 500\n    \n    - Sample Response Body :\n    \n      ```json\n      {\n        \"_statusCode\": 500,\n        \"_errorCode\": \"INTERNAL_SERVICE_ERROR\",\n        \"_status\": \"ERROR\",\n        \"_errorId\": 1458819775194\n      }\n      ```\n\n## Configuration",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/naveenreddyalkaverse/humane-indexer.git"
  },
  "scripts": {
    "clean": "rm -rf lib/",
    "compile": "npm run lint && npm run clean && babel -d lib/ src/",
    "lint": "eslint ./src/",
    "prepublish": "npm run compile"
  },
  "version": "2.0.2"
}
