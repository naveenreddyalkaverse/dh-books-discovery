'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (indexerBuilder, indicesConfig) {
  new _CliBuilder.Command('createAllIndices').description('Creates All Index Settings and Mappings').action(() => indexerBuilder().createIndex());

  new _CliBuilder.Command('deleteAllIndices').description('Deletes All Indices Data, Settings, and Mappings').action(() => indexerBuilder().deleteIndex());

  (0, _lodash2.default)(indicesConfig.indices).keys().forEach(indexKey => {
    const name = _lodash2.default.upperFirst(_lodash2.default.camelCase(indexKey));

    new _CliBuilder.Command(`create${ name }Index`).description(`Creates ${ name } Index Settings and Mappings`).action(() => indexerBuilder().createIndex(indexKey));

    new _CliBuilder.Command(`delete${ name }Index`).description(`Deletes ${ name } Index Data, Settings, and Mappings`).action(() => indexerBuilder().deleteIndex(indexKey));
  });

  (0, _lodash2.default)(indicesConfig.types).keys().forEach(typeKey => {
    const typeConfig = indicesConfig.types[typeKey];
    if (typeConfig.child) {
      return true;
    }

    const name = _lodash2.default.upperFirst(_lodash2.default.camelCase(typeKey));

    new _CliBuilder.Command(`upsert${ name }`).option(`-d, --data <${ typeKey }-data>`, `${ name } data in JSON format`).description(`Upserts ${ name }`).action(args => indexerBuilder.upsert(null, { type: typeConfig.type, doc: JSON.parse(args.data) }));

    new _CliBuilder.Command(`add${ name }`).option(`-d, --data <${ typeKey }-data>`, `${ name } data in JSON format`).description(`Adds ${ name }`).action(args => indexerBuilder.add(null, { type: typeConfig.type, doc: JSON.parse(args.data) }));

    new _CliBuilder.Command(`update${ name }`).option(`-d, --data <${ typeKey }-data>`, `${ name } data in JSON format`).description(`Updates ${ name }`).action(args => indexerBuilder.update(null, { type: typeConfig.type, doc: JSON.parse(args.data) }));

    new _CliBuilder.Command(`delete${ name }`).option('--id <id>', `ID of the ${ typeKey } to delete`).description(`Deletes ${ name }`).action(args => indexerBuilder.remove(null, { type: typeConfig.type, id: args.id }));

    return true;
  });
};

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _CliBuilder = require('command-line-boilerplate/lib/CliBuilder');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }